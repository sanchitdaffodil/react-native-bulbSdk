buildscript {
    if (project == rootProject) {
        repositories {
            google()
            mavenCentral()
            jcenter()

        }

        dependencies {
            classpath 'com.android.tools.build:gradle:3.5.3'
        }
    }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('Bulbsdk_compileSdkVersion', 31)
    defaultConfig {
        minSdkVersion safeExtGet('Bulbsdk_minSdkVersion', 21)
        targetSdkVersion safeExtGet('Bulbsdk_targetSdkVersion', 31)
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
  packagingOptions {
    pickFirst  'META-INF/*'
    pickFirst  '**'
  }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url("$rootDir/../node_modules/react-native/android")
    }
    google()
    mavenCentral()
    jcenter()
  flatDir {
    dirs 'libs'
  }
}

dependencies {
    //noinspection GradleDynamicVersion
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  implementation "com.facebook.react:react-native:+"  // From node_modules
   /*  implementation files('app-release.aar')
     implementation files('networkmanager-release.aar')*/
  /*implementation(name:'app-release', ext:'aar')*/
  implementation files('libs/app-release.aar')
  implementation files('libs/networkmanager-release.aar')
  implementation "androidx.multidex:multidex:2.0.1"

/*
  implementation project(path: ':app')
*/

}
